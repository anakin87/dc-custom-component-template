[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "dc-custom-component"
description = 'Custom Haystack component to be used with deepset AI Platform'
readme = "README.md"
requires-python = ">=3.12" # deepset at the moment uses 3.12
license = "MIT"
keywords = []
authors = [{ name = "deepset", email = "platform-engineering-exploration@deepset.de" }]
classifiers = [
  "Development Status :: 4 - Beta",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Programming Language :: Python :: Implementation :: CPython",
  "Programming Language :: Python :: Implementation :: PyPy",
]
dependencies = [
  "haystack-ai>=2.10.0",
  "deepl-haystack>=0.3.0"

]
dynamic = ["version"]

[tool.hatch.version]
path = "src/dc_custom_component/__about__.py"

[[tool.hatch.envs.all.matrix]]
python = ["3.12", "3.13"]

[tool.hatch.envs.default]
dependencies = [
  "pytest==7.4.2",
]

[tool.hatch.envs.default.scripts]
tests = "pytest -vv tests"

[tool.hatch.envs.dc]
detached = true

[tool.hatch.envs.dc.scripts]
build = "mkdir -p dist && rm -rf dist/custom_component.zip && zip -r dist/custom_component.zip ./* -x 'dist/*' '**/__pycache__/*'"
push = "curl --request POST --url ${{API_URL:-https://api.cloud.deepset.ai}}/api/v2/custom_components --header 'accept: application/json' --header \"Authorization: Bearer ${{API_KEY}}\" --form 'file=@dist/custom_component.zip;type=application/zip'"
build-and-push = "mkdir -p dist && rm -f dist/custom_component.zip && zip -r dist/custom_component.zip ./* -x 'dist/*' '**/__pycache__/*' && curl --request POST --url ${{API_URL:-https://api.cloud.deepset.ai}}/api/v2/custom_components --header 'accept: application/json' --header \"Authorization: Bearer ${{API_KEY}}\" --form 'file=@dist/custom_component.zip;type=application/zip'"
build-and-push-with-linting = "hatch run code-quality:all && mkdir -p dist && rm -f dist/custom_component.zip && zip -r dist/custom_component.zip ./* -x 'dist/*' '**/__pycache__/*' && curl --request POST --url ${{API_URL:-https://api.cloud.deepset.ai}}/api/v2/custom_components --header 'accept: application/json' --header \"Authorization: Bearer ${{API_KEY}}\" --form 'file=@dist/custom_component.zip;type=application/zip'"
list = "curl --request GET --url ${{API_URL:-https://api.cloud.deepset.ai}}/api/v2/custom_components --header 'accept: application/json' --header \"Authorization: Bearer ${{API_KEY}}\""
build-windows = "powershell -Command \"& {{ if (-Not (Test-Path dist)) {{mkdir dist}}; if (Test-Path dist/custom_component.zip) {{ Remove-Item dist/custom_component.zip }}; Get-ChildItem -Path . | Where-Object {{ $_.FullName -notlike '*\\dist*' }} | Compress-Archive -DestinationPath dist/custom_component.zip -Update }}\""
push-windows = [
  'IF "%API_URL%"=="" (SET "_api_url=https://api.cloud.deepset.ai") ELSE (SET "_api_url=%API_URL%")',
  "curl --request POST --url %_api_url%/api/v2/custom_components --header \"accept: application/json\" --header \"Authorization: Bearer %API_KEY%\" --form \"file=@dist/custom_component.zip;type=application/zip\""
]
list-windows = [
  'IF "%API_URL%"=="" (SET "_api_url=https://api.cloud.deepset.ai") ELSE (SET "_api_url=%API_URL%")',
  "curl --request GET --url %_api_url%/api/v2/custom_components --header \"accept: application/json\" --header \"Authorization: Bearer %API_KEY%\""
]
logs = "curl --request GET --url ${{API_URL:-https://api.cloud.deepset.ai}}/api/v2/custom_components/logs --header 'accept: text/plain' --header \"Authorization: Bearer $API_KEY\""
logs-windows = [
  'IF "%API_URL%"=="" (SET "_api_url=https://api.cloud.deepset.ai") ELSE (SET "_api_url=%API_URL%")',
  "curl --request GET --url %_api_url%/api/v2/custom_components/logs --header \"accept: text/plain\" --header \"Authorization: Bearer %API_KEY%\""
]

[tool.hatch.envs.code-quality]
python = "3.12"
detached = true
dependencies = [
  "black==23.9.1",
  "mypy==1.9.0",
  "ruff==0.3.2",
]

[tool.hatch.build.targets.wheel]
packages = ["src/dc_custom_component"]

[tool.hatch.envs.code-quality.scripts]
format = "black src tests --check"
format-fix = "black src tests"
lint = "ruff check . --output-format=github"
lint-ci = "ruff check . --output-format=github"
lint-fix = "ruff check .  --fix --output-format=github"
hooks = "pre-commit install"
docstrings = "pydocstyle src"
all = "mypy src tests && black src tests && ruff check --fix ."

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
ignore_missing_imports = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
